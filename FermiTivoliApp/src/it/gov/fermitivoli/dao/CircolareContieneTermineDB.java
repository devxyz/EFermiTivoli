package it.gov.fermitivoli.dao;

import it.gov.fermitivoli.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table CIRCOLARE_CONTIENE_TERMINE_DB.
 */
public class CircolareContieneTermineDB {

    private long _id_circolare;
    private long _id_termine;
    private Long id;
    private long occorrenze;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CircolareContieneTermineDBDao myDao;

    private CircolareDB circolareDB;
    private Long circolareDB__resolvedKey;

    private TermineDB termineDB;
    private Long termineDB__resolvedKey;


    public CircolareContieneTermineDB() {
    }

    public CircolareContieneTermineDB(Long id) {
        this.id = id;
    }

    public CircolareContieneTermineDB(long _id_circolare, long _id_termine, Long id, long occorrenze) {
        this._id_circolare = _id_circolare;
        this._id_termine = _id_termine;
        this.id = id;
        this.occorrenze = occorrenze;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCircolareContieneTermineDBDao() : null;
    }

    public long get_id_circolare() {
        return _id_circolare;
    }

    public void set_id_circolare(long _id_circolare) {
        this._id_circolare = _id_circolare;
    }

    public long get_id_termine() {
        return _id_termine;
    }

    public void set_id_termine(long _id_termine) {
        this._id_termine = _id_termine;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getOccorrenze() {
        return occorrenze;
    }

    public void setOccorrenze(long occorrenze) {
        this.occorrenze = occorrenze;
    }

    /** To-one relationship, resolved on first access. */
    public CircolareDB getCircolareDB() {
        long __key = this._id_circolare;
        if (circolareDB__resolvedKey == null || !circolareDB__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CircolareDBDao targetDao = daoSession.getCircolareDBDao();
            CircolareDB circolareDBNew = targetDao.load(__key);
            synchronized (this) {
                circolareDB = circolareDBNew;
            	circolareDB__resolvedKey = __key;
            }
        }
        return circolareDB;
    }

    public void setCircolareDB(CircolareDB circolareDB) {
        if (circolareDB == null) {
            throw new DaoException("To-one property '_id_circolare' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.circolareDB = circolareDB;
            _id_circolare = circolareDB.getId();
            circolareDB__resolvedKey = _id_circolare;
        }
    }

    /** To-one relationship, resolved on first access. */
    public TermineDB getTermineDB() {
        long __key = this._id_termine;
        if (termineDB__resolvedKey == null || !termineDB__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TermineDBDao targetDao = daoSession.getTermineDBDao();
            TermineDB termineDBNew = targetDao.load(__key);
            synchronized (this) {
                termineDB = termineDBNew;
            	termineDB__resolvedKey = __key;
            }
        }
        return termineDB;
    }

    public void setTermineDB(TermineDB termineDB) {
        if (termineDB == null) {
            throw new DaoException("To-one property '_id_termine' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.termineDB = termineDB;
            _id_termine = termineDB.getId();
            termineDB__resolvedKey = _id_termine;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
